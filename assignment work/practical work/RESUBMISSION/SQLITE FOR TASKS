
=======================================================================================================================================
---------------------------------------------------------------------------------------------------------------------------------------
=======================================================================================================================================

PART 1
A)
---------------------------------------------------------------------------------------------------------------------------------------

SELECT Shopper_first_name AS 'first name',
    IFNULL(Shopper_surname,'not known')AS 'surname',
    IFNULL(Shopper_email_address,'not known') AS 'email address',
    IFNULL(gender,'not known') AS 'gender',
    IFNULL(STRFTIME('%d-%m-%Y',Date_joined),'not known') AS 'date joined',
    IFNULL((strftime('%Y', 'now') - strftime('%Y', date_of_birth)) - (strftime('%m-%d', 'now') < strftime('%m-%d', date_of_birth)),'not known') AS age
    FROM shoppers
    WHERE Date_joined > '2020-01-01' OR gender = 'F';

    --Fix date, issue: results display dates before the given date of 01-01-2020; regardless of how to WHERE clause is structured; research further
---------------------------------------------------------------------------------------------------------------------------------------



B)
---------------------------------------------------------------------------------------------------------------------------------------

SELECT s.shopper_first_name AS [first name],
       s.shopper_surname AS surname,
       so.order_id AS [order ID],
       so.order_date AS [order date],
       p.product_description AS [product description],
       sell.seller_name AS [seller name],
       op.quantity AS [quantity ordered],
       PRINTF("£%7.2f", ps.price) AS price,
       op.ordered_product_status
  FROM shopper_orders so
       INNER JOIN
       shoppers s ON s.shopper_id = so.shopper_id
       INNER JOIN
       ordered_products op ON op.order_id = so.order_id
       INNER JOIN
       products p ON p.product_id = op.product_id
       INNER JOIN
       product_sellers ps ON ps.product_id = op.product_id
       INNER JOIN
       sellers sell ON sell.seller_id = ps.seller_id
 WHERE s.shopper_id = '10019'
 ORDER BY so.order_date;
---------------------------------------------------------------------------------------------------------------------------------------


C)
---------------------------------------------------------------------------------------------------------------------------------------

SELECT s.shopper_first_name AS [first name],
       s.shopper_surname AS surname,
       so.order_id AS [order ID],
       STRFTIME('%d-%m-%Y', so.order_date) AS [order date],
       p.product_description AS [product description],
       sell.seller_name AS [seller name],
       op.quantity AS [quantity ordered],
       PRINTF("£%7.2f", ps.price) AS price,
       op.ordered_product_status
  FROM shopper_orders so
       INNER JOIN
       shoppers s ON s.shopper_id = so.shopper_id
       INNER JOIN
       ordered_products op ON op.order_id = so.order_id
       INNER JOIN
       products p ON p.product_id = op.product_id
       INNER JOIN
       product_sellers ps ON ps.product_id = op.product_id
       INNER JOIN
       sellers sell ON sell.seller_id = ps.seller_id
 WHERE s.shopper_id = '10019'
 ORDER BY so.order_date DESC;
---------------------------------------------------------------------------------------------------------------------------------------


D)
---------------------------------------------------------------------------------------------------------------------------------------

SELECT category_description
      ,product_description
      ,product_code
      ,IFNULL(AVG(op.quantity),'0') AS [average quantity sold]
  FROM products p
      INNER JOIN
      categories c on c.category_id = p.category_id
      INNER JOIN
      ordered_products op ON op.product_id = p.product_id
  GROUP BY category_description
   HAVING AVG(op.quantity) > op.quantity
  ;

  -- requires outer joins, not inner joins; disregard and retry after studying outer joins.
---------------------------------------------------------------------------------------------------------------------------------------

=======================================================================================================================================
---------------------------------------------------------------------------------------------------------------------------------------
=======================================================================================================================================


PART 2

=======================================================================================================================================
---------------------------------------------------------------------------------------------------------------------------------------
=======================================================================================================================================


seller reviews create script
---------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE seller_reviews (
    review_number INTEGER PRIMARY KEY AUTOINCREMENT
                          UNIQUE
                          NOT NULL,
    seller_id     INTEGER REFERENCES sellers (seller_id) 
                          NOT NULL,
    seller_rating TEXT    NOT NULL,
    seller_review TEXT    NOT NULL,
    date_recorded DATE    NOT NULL,
    shopper_id    INTEGER REFERENCES shoppers (shopper_id) 
);

---------------------------------------------------------------------------------------------------------------------------------------
product reviews create script
---------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE product_reviews (
    product_id     INTEGER REFERENCES products (product_id) 
                           PRIMARY KEY
                           NOT NULL,
    product_rating TEXT    NOT NULL,
    product_review TEXT    NOT NULL,
    date_recorded  DATE    NOT NULL,
    shopper_id     INTEGER REFERENCES shoppers (shopper_id) 
                           NOT NULL
                           UNIQUE
);
---------------------------------------------------------------------------------------------------------------------------------------
product questions create script
---------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE product_Q
    product_id INTEGER REFERENCES products (product_id)
                       NOT NULL,
    question_number INTEGER PRIMARY KEY AUTOINCREMENT
                            UNIQUE
                            NOT NULL,
    question        TEXT    NOT NULL,
    date_recorded   DATE    NOT NULL
);

---------------------------------------------------------------------------------------------------------------------------------------
product answers create script
---------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE product_A
    question_number INTEGER REFERENCES product_Q (question_number)
                            NOT NULL,
    answer          TEXT    NOT NULL,
    date_recorded   DATE    NOT NULL,
    answer_number   INTEGER PRIMARY KEY AUTOINCREMENT
);
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
table population script
---------------------------------------------------------------------------------------------------------------------------------------


INSERT INTO product_Q (product_id,question,date_recorded)
VALUES('3007717','how does it smell?','01/02/2015');

INSERT INTO product_Q (product_id,question,date_recorded)
VALUES('3007717','how does it taste?','02/01/2018');

INSERT INTO product_Q (product_id,question,date_recorded)
VALUES('3007717','does it fit in a glove box?','03/08/2014');

INSERT INTO product_Q (product_id,question,date_recorded)
VALUES('3007717','does it cause cancer?','11-11-2019');

INSERT INTO product_Q (product_id,question,date_recorded)
VALUES('3007717','is the packaging edible?','09-12-2020');

INSERT INTO product_Q (product_id,question,date_recorded)
VALUES('3007717','why does it cost so much?','04-04-2017');

---------------------------------------------------------------------------------------------------------------------------------------

INSERT INTO product_A (question_number,answer,date_recorded)
VALUES ('1','it smells like the house across the street has a stockpile of rotten eggs; distantly vile','07/03/2015');

INSERT INTO product_A (question_number,answer,date_recorded)
VALUES ('2','bland, and uninteresting','07/03/2018');

INSERT INTO product_A (question_number,answer,date_recorded)
VALUES ('2','faintly of vanilla','06/04/2019');

INSERT INTO product_A (question_number,answer,date_recorded)
VALUES ('3','most decidedly not','03/03/2015');

INSERT INTO product_A (question_number,answer,date_recorded)
VALUES ('3','perhaps; although not in one piece, and it depends on your car model','07/09/2014');

INSERT INTO product_A (question_number,answer,date_recorded)
VALUES ('4','only if you swallow it','07/03/2020');

INSERT INTO product_A (question_number,answer,date_recorded)
VALUES ('4','I sell things on an online market, how am i supposed to know?','12/12/2019');

INSERT INTO product_A (question_number,answer,date_recorded)
VALUES ('5','yes, but only once','12/12/2020');

INSERT INTO product_A (question_number,answer,date_recorded)
VALUES ('5','a tad chewy for my tastes, although I cannot speak for your preferences','10/12/2020');

INSERT INTO product_A (question_number,answer,date_recorded)
VALUES ('1','it does not smell much of anything, although, i do suffer from anosmia','04/04/2016');

INSERT INTO product_A (question_number,answer,date_recorded)
VALUES ('6','manufacturing costs','08/05/2018');

INSERT INTO product_A (question_number,answer,date_recorded)
VALUES ('6','an unbelievably transparent money laundering scheme','07/05/2018');

---------------------------------------------------------------------------------------------------------------------------------------

INSERT INTO product_reviews (product_id,product_rating,product_review,date_recorded,shopper_id)
VALUES ('3000000','***','pretty awful','07/05/2018','10012');


INSERT INTO product_reviews (product_id,product_rating,product_review,date_recorded,shopper_id)
VALUES ('3007689','**','disappointing yet sufficient','07/05/2018','10009');

INSERT INTO product_reviews (product_id,product_rating,product_review,date_recorded,shopper_id)
VALUES ('3007779','****','does the job','07/05/2018','10008');

INSERT INTO product_reviews (product_id,product_rating,product_review,date_recorded,shopper_id)
VALUES ('3007937','*****','happy with the performance','07/05/2018','10020');

INSERT INTO product_reviews (product_id,product_rating,product_review,date_recorded,shopper_id)
VALUES ('3006033','*','more of a let down than my children','07/05/2018','10010');

INSERT INTO product_reviews (product_id,product_rating,product_review,date_recorded,shopper_id)
VALUES ('3000021','****','could be better','07/05/2018','10021');

---------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO seller_reviews (seller_id,seller_rating,seller_review,date_recorded,shopper_id)
VALUES('200004','***','delivery arrived quickly but damaged','01/06/2018','10008');

INSERT INTO seller_reviews (seller_id,seller_rating,seller_review,date_recorded,shopper_id)
VALUES('200011','**','late delivery, missing items','07/03/2018','10012');

INSERT INTO seller_reviews (seller_id,seller_rating,seller_review,date_recorded,shopper_id)
VALUES('200010','****','fast delivery, excellent service','04/02/2014','10020');

INSERT INTO seller_reviews (seller_id,seller_rating,seller_review,date_recorded,shopper_id)
VALUES('200007','**','never responded to late package queries, refund issued.','06/09/2017','10021');

INSERT INTO seller_reviews (seller_id,seller_rating,seller_review,date_recorded,shopper_id)
VALUES('200002','*****','excellent customer service, timely delivery, great product','03/02/2019','10009');
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------
view create scripts
---------------------------------------------------------------------------------------------------------------------------------------
	1)
		product rating, description, review, and category id
---------------------------------------------------------------------------------------------------------------------------------------

CREATE VIEW 'product rating and description' AS
SELECT product_reviews.*
     ,product_reviews.product_id
    ,products.product_description
    ,products.category_id

FROM product_reviews 
INNER JOIN products ON products.product_id = product_reviews.product_id 
;

---------------------------------------------------------------------------------------------------------------------------------------
2) 
	product Q&A
---------------------------------------------------------------------------------------------------------------------------------------

CREATE VIEW [product Q&A] AS
    SELECT product_Q.product_id,
           products.product_description,
           product_Q.question_number,
           product_Q.question,
           product_A.answer
      FROM product_Q
           INNER JOIN
           product_A ON product_Q.question_number = product_A.question_number
           INNER JOIN
           products ON product_Q.product_id = products.product_id;
	

---------------------------------------------------------------------------------------------------------------------------------------
3) 
	seller reviews reviewer details
---------------------------------------------------------------------------------------------------------------------------------------

CREATE VIEW [seller reviews and reviewers details] AS
    SELECT sellers.seller_id AS [seller id],
           seller_reviews.seller_rating AS [seller rating],
           seller_reviews.seller_review AS [seller review],
           seller_reviews.shopper_id AS [shopper id],
           shoppers.shopper_first_name AS [shopper first name],
           shoppers.shopper_surname AS [shopper surname]
      FROM sellers
           INNER JOIN
           seller_reviews ON sellers.seller_id = seller_reviews.seller_id
           INNER JOIN
           shoppers ON seller_reviews.shopper_id = shoppers.shopper_id;

=======================================================================================================================================
---------------------------------------------------------------------------------------------------------------------------------------
=======================================================================================================================================
